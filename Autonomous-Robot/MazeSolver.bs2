' {$STAMP BS2}
' {$PBASIC 2.5}

' Author: Kiet Lam
' Email: ktklam9@gmail.com
' Purpose: Boe-Bot maze solver


' Adjust the PIN if needed
BoeBotServoL   PIN     13 ' Left wheel
BoeBotServoR   PIN     12 ' Right wheel
PingServo      PIN     14 ' Ultrasonic servo
Ping           PIN     15 ' Ultrasonic

' Calibrate these to make sure they are correct
TurnLLFast     CON     650 ' The rotation for the left wheel's servo on a left turn
TurnLRFast     CON     650 ' The rotation for the right wheel's servo on a left turn
TurnRLFast     CON     850 ' The rotation for the left wheel's servo on a right turn
TurnRRFast     CON     850 ' The rotation for the right wheel's servo on a right turn
FwdLeftFast    CON     700 ' The rotation for the left wheel's servo on forward
FwdRightFast   CON     800 ' The rotation for the right wheel's servo on forward
Center         CON     750 ' No rotation


' Calibrate this to make sure the robot is converting the time to centimeter correctly
' for the Ultrasonic Ping
cmConversion   CON     2251


' Parametric Variables (change these values when calling respective subroutines)
distance           VAR     Word ' The distance to detect objects
forwardDur         VAR     Byte ' The duration to go forward
turnDeg            VAR     Byte ' The turn degrees
wallIsLeft         VAR     Bit  ' Is there a wall on the left
wallIsFront        VAR     Bit  ' Is there a wall in the front

' Private Variables:
counter            VAR     Byte
time               VAR     Word
objectDetected     VAR     Bit
counterI           VAR     Word
sweepDeg           VAR     Word
degIntern          VAR     Word
degFree            VAR     Word
pingServoLeft      VAR     Word
pingServoRight     VAR     Word


GOSUB MAIN
END

MAIN:
  sweepDeg   = 18
  distance   = 13
  forwardDur = 10
  turnDeg    = 18


  DO
  ' Check if there is a wall in front
    GOSUB detectWallLeft
  ' Check if there is a wall on the left
    GOSUB detectWallFront

  ' If there is no wall on the left
    IF (wallIsLeft = 0) THEN
    ' Turn to the left 90 degrees
      GOSUB turnLeft
    ELSE
    ' If there is a wall in front
      IF (wallIsFront = 1) THEN
      ' Turn to the right 90 degrees
        GOSUB turnRight
      ENDIF
    ENDIF

    GOSUB forward
  LOOP

  RETURN


detectWallFront:
  GOSUB pingCenter
  GOSUB detectObject
  IF (objectDetected = 1) THEN
    wallIsFront = 1
    PAUSE 50
  ELSE
    wallIsFront = 0
  ENDIF

  RETURN


detectWallLeft:
  pingServoLeft = 750 + 5 * 100
  GOSUB pingLeft
  GOSUB detectObject
  IF (objectDetected = 1) THEN
    wallIsLeft = 1
    PAUSE 50
  ELSE
    wallIsLeft = 0
    PAUSE 50
  ENDIF

  RETURN


' Turn 90 degrees to the right
turnRight:
  FOR counter = 0 TO 25
    PULSOUT BoeBotServoL, TurnRLFast
    PULSOUT BoeBotServoR, TurnRRFast
    PAUSE 20
  NEXT

  RETURN

' Turn 90 degrees to the right
turnLeft:
  FOR counter = 0 TO 25
    PULSOUT BoeBotServoL, TurnLLFast
    PULSOUT BoeBotServoR, TurnLRFast
    PAUSE 20
  NEXT

  RETURN


' Parametric Variables:
' forwardDur : Duration of going forward
forward:
  FOR counter = 0 TO forwardDur
    PULSOUT BoeBotServoL, FwdLeftFast
    PULSOUT BoeBotServoR, FwdRightFast
    PAUSE 20
  NEXT

  PAUSE 20
  RETURN


' Detect whether an object is infront of the Boe bot
' Uses distance to determine this
detectObject:
  PULSOUT Ping, 5
  PULSIN  Ping, 1, time
  time = time ** cmConversion
  IF (time < distance) THEN
    objectDetected = 1
  ELSE
    objectDetected = 0
  ENDIF

  PAUSE 20
  RETURN


' Move the Ultrasonic servo to the left
pingLeft:
  FOR counterI = 1 TO 10
    PULSOUT 14, pingServoLeft
    PAUSE 20
  NEXT
  RETURN


' Move the Ultrasonic servo to the right
pingRight:
  FOR counterI = 1 TO 10
    PULSOUT 14, pingServoRight
    PAUSE 20
  NEXT
  RETURN


' Center the Ultrasonic servo
pingCenter:
  FOR counterI = 1 TO 10
    PULSOUT 14, Center
    PAUSE 20
  NEXT
  RETURN
